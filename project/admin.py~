from django.contrib import admin
from .models import SurveyResponse, Enterprise
from .forms import SurveyResponseAdminForm
import csv
from django.http import HttpResponse


class SurveyResponseAdmin(admin.ModelAdmin):
    model = SurveyResponse
    form = SurveyResponseAdminForm
    list_display = (
        'id', 'enterprise', 'position_level', 'program_goal_understanding', 'role_understanding', 'supervisor_support',
        'program_encouragement', 'program_impact', 'interaction_assessment', 'program_priority',
        'program_information', 'knowledge_application', 'program_expectations', 'program_obstacles',
        'additional_comments',
    )
    list_filter = (
        'enterprise', 'position_level', 'program_goal_understanding', 'role_understanding', 'supervisor_support',
        'program_encouragement', 'program_impact', 'interaction_assessment', 'program_priority',
        'program_information', 'knowledge_application', 'program_expectations', 'program_obstacles',
    )
    search_fields = (
        'enterprise__name', 'position_level', 'program_goal_understanding', 'role_understanding', 'supervisor_support',
        'program_encouragement', 'program_impact', 'interaction_assessment', 'program_priority',
        'program_information', 'knowledge_application', 'program_expectations', 'program_obstacles',
        'additional_comments',
    )
    
    list_select_related = ('enterprise',)
    actions = ['export_as_csv', 'mark_as_reviewed', 'export_as_pdf']
    
    def export_as_csv(self, request, queryset):
        response = HttpResponse(content_type='text/csv')
        response['Content-Disposition'] = 'attachment; filename="survey_responses.csv"'
        writer = csv.writer(response)
        writer.writerow(['ID', 'Enterprise', 'Position Level', 'Program Goal Understanding', 'Additional Comments'])
        for obj in queryset:
            writer.writerow(
                [obj.id, obj.enterprise, obj.position_level, obj.program_goal_understanding, obj.additional_comments])
        return response
    
    export_as_csv.short_description = "Экспортировать в CSV"
    
    def mark_as_reviewed(self, request, queryset):
        updated = queryset.update(reviewed=True)
        self.message_user(request, f"{updated} записей были отмечены как проверенные.")
    
    mark_as_reviewed.short_description = "Отметить как проверенные"
    
    def export_as_pdf(self, request, queryset):
        if queryset.count() != 1:
            self.message_user(request, "Выберите только одну запись для экспорта в PDF.")
            return
        
        survey_response = queryset.first()
        enterprise_id = survey_response.enterprise.id
        
        # Генерируем PDF и отправляем его пользователю
        response = generate_pdf(request, enterprise_id)
        return response
    
    export_as_pdf.short_description = "Экспортировать в PDF"
    
    class Media:
        js = ('js/admin_custom.js',)


class SurveyResponseInline(admin.TabularInline):
    model = SurveyResponse
    extra = 0


class EnterpriseAdmin(admin.ModelAdmin):
    model = Enterprise
    list_display = ('name', 'employees', 'num_responses')
    list_filter = ('name', 'employees')
    search_fields = ('name', 'employees')
    inlines = [SurveyResponseInline]
    
    @admin.display(description='Количество сотрудников')
    def employees(self, obj):
        return obj.employees
    
    @admin.display(description='Количество ответов')
    def num_responses(self, obj):
        return obj.surveyresponse_set.count()


admin.site.register(SurveyResponse, SurveyResponseAdmin)
admin.site.register(Enterprise, EnterpriseAdmin)
